#include "execute.hpp"
#include "parser.hpp"
#include "utils.hpp"
#include <gtest/gtest.h>

using namespace fizzy;

TEST(end_to_end, milestone1)
{
    /*
    (module
      (func $add (param $lhs i32) (param $rhs i32) (result i32)
        (local $local1 i32)
        local.get $lhs
        local.get $rhs
        i32.add
        local.get $local1
        i32.add
        local.tee $local1
        local.get $lhs
        i32.add
      )
    )
    */

    const auto bin = from_hex(
        "0061736d0100000001070160027f7f017f030201000a13011101017f200020016a20026a220220006a0b");
    const auto module = parse(bin);

    const auto [trap, ret] = execute(module, 0, {20, 22});

    ASSERT_FALSE(trap);
    ASSERT_EQ(ret.size(), 1);
    EXPECT_EQ(ret[0], 20 + 22 + 20);
}

TEST(end_to_end, DISABLED_milestone2)
{
    // from https://gist.github.com/poemm/356ba2c6826c6f5953db874e37783417#file-mul256_opt0-wat
    // but replaced global with const and removed return statement
    const auto bin = from_hex(
        "0061736d0100000001070160037f7f7f000302010005030100020a840601"
        "810602567f0d7e41808804210341c0002104200320046b21054100210620"
        "05200036023c2005200136023820052002360234200528023c2107200520"
        "073602302005200636022c0240034041102108200528022c21092009210a"
        "2008210b200a200b48210c4101210d200c200d71210e200e450d01410021"
        "0f20052802302110200528022c2111410221122011201274211320102013"
        "6a21142014200f360200200528022c211541012116201520166a21172005"
        "201736022c0c00000b000b41002118200520183602280240034041082119"
        "2005280228211a201a211b2019211c201b201c48211d4101211e201d201e"
        "71211f201f450d0141002120200520203602242005202036022002400340"
        "410821212005280220212220222123202121242023202448212541012126"
        "202520267121272027450d01200528023021282005280228212920052802"
        "20212a2029202a6a212b4102212c202b202c74212d2028202d6a212e202e"
        "280200212f202f21302030ad215920052802382131200528022021324102"
        "213320322033742134203120346a213520352802002136203621372037ad"
        "215a20052802342138200528022821394102213a2039203a74213b203820"
        "3b6a213c203c280200213d203d213e203ead215b205a205b7e215c205920"
        "5c7c215d2005205d3703182005280224213f203f21402040ad215e200529"
        "0318215f205f205e7c216020052060370318200529031821614220216220"
        "61206288216320052063370310200529031821642064a721412005204136"
        "020c200528020c2142200528023021432005280228214420052802202145"
        "204420456a21464102214720462047742148204320486a21492049204236"
        "0200200529031021652065a7214a2005204a3602242005280220214b4101"
        "214c204b204c6a214d2005204d3602200c00000b000b2005280224214e20"
        "05280230214f2005280228215041082151205020516a2152410221532052"
        "2053742154204f20546a21552055204e3602002005280228215641012157"
        "205620576a2158200520583602280c00000b000b0b");

    const auto module = parse(bin);

    auto instance = instantiate(module, {});

    // This performs uint256 x uint256 -> uint512 multiplication.
    // Arg1: 2^255 + 1
    instance.memory[0] = 1;
    instance.memory[31] = 0x80;
    // Arg2: 2^255 + 2^254 + 0xff
    instance.memory[32] = 0xff;
    instance.memory[63] = 0xc0;
    const auto [trap, ret] = execute(instance, 0, {64, 0, 32});

    ASSERT_FALSE(trap);
    ASSERT_EQ(ret.size(), 0);
    EXPECT_EQ(hex(instance.memory.substr(64, 64)),
        "ff00000000000000000000000000000000000000000000000000000000000040"
        "8000000000000000000000000000000000000000000000000000000000000060");
}

TEST(end_to_end, DISABLED_milestone2_640000_iterations)
{
    // from
    // https://gist.github.com/poemm/356ba2c6826c6f5953db874e37783417#file-mul256_640000_opt0-wat
    // but replaced global with const and removed return statement
    const auto bin = from_hex(
        "0061736d0100000001070160037f7f7f0003020100040501700101010503"
        "010002071302066d656d6f72790200066d756c32353600000ade0601db06"
        "02617f0d7e41808804210341c0002104200320046b210541002106200520"
        "0036023c2005200136023820052002360234200520063602300240034041"
        "808827210720052802302108200821092007210a2009200a48210b410121"
        "0c200b200c71210d200d450d014100210e200528023c210f2005200f3602"
        "2c2005200e36022802400340411021102005280228211120112112201021"
        "132012201348211441012115201420157121162016450d01410021172005"
        "28022c2118200528022821194102211a2019201a74211b2018201b6a211c"
        "201c20173602002005280228211d4101211e201d201e6a211f2005201f36"
        "02280c00000b000b41002120200520203602240240034041082121200528"
        "022421222022212320212124202320244821254101212620252026712127"
        "2027450d0141002128200520283602202005202836021c02400340410821"
        "29200528021c212a202a212b2029212c202b202c48212d4101212e202d20"
        "2e71212f202f450d01200528022c213020052802242131200528021c2132"
        "203120326a21334102213420332034742135203020356a21362036280200"
        "2137203721382038ad216420052802382139200528021c213a4102213b20"
        "3a203b74213c2039203c6a213d203d280200213e203e213f203fad216520"
        "052802342140200528022421414102214220412042742143204020436a21"
        "4420442802002145204521462046ad2166206520667e2167206420677c21"
        "682005206837031020052802202147204721482048ad2169200529031021"
        "6a206a20697c216b2005206b3703102005290310216c4220216d206c206d"
        "88216e2005206e3703082005290310216f206fa721492005204936020420"
        "05280204214a200528022c214b2005280224214c200528021c214d204c20"
        "4d6a214e4102214f204e204f742150204b20506a21512051204a36020020"
        "0529030821702070a7215220052052360220200528021c21534101215420"
        "5320546a21552005205536021c0c00000b000b2005280220215620052802"
        "2c21572005280224215841082159205820596a215a4102215b205a205b74"
        "215c2057205c6a215d205d20563602002005280224215e4101215f205e20"
        "5f6a2160200520603602240c00000b000b20052802302161410121622061"
        "20626a2163200520633602300c00000b000b0b");

    const auto module = parse(bin);

    // Ignore the results for now
    const auto [trap, ret] = execute(module, 0, {0, 0, 0});

    ASSERT_FALSE(trap);
    ASSERT_EQ(ret.size(), 0);
}

TEST(end_to_end, DISABLED_nested_loops_in_c)
{
    /*
    int test(int a, int b, int c)
    {
        int ret = 0;
        for (int i = 0; i < a; i++)
        {
            ret++;
            for (int j = 0; j < b; j++)
            {
                ret += 7;
                for (int k = 0; k < c; k++)
                {
                    ret /= 2;
                    if (ret == 4)
                        return ret;
                }
            }
        }
        return ret;
    }
    */

    const auto bin = from_hex(
        "0061736d01000000010b0260000060037f7f7f017f030201010405017001"
        "010105030100020615037f01418088040b7f00418088040b7f004180080b"
        "072c0404746573740000066d656d6f727902000b5f5f686561705f626173"
        "6503010a5f5f646174615f656e6403020aa50101a20101057f0240024020"
        "004101480d0020014101480d01200141076c41016a210341002104410021"
        "050240034002400240200241004c0d00200541016a210541002106034020"
        "0541076a21054100210703402005417e714108460d05200541026d210520"
        "0741016a22072002480d000b200641016a22062001480d000c020b0b2003"
        "20056a21050b200441016a22042000480d000b20050f0b41040f0b41000f"
        "0b20000b");

    const auto module = parse(bin);

    // Ignore the results for now
    const auto [trap, ret] = execute(module, 0, {10, 2, 5});

    ASSERT_FALSE(trap);
    ASSERT_EQ(ret.size(), 1);
    EXPECT_EQ(ret[0], 4);
}

TEST(end_to_end, DISABLED_memset)
{
    /*
    (func $test (export "test") (type $t1) (param $p0 i32) (param $p1 i32)
    block $B0
      get_local $p1
      i32.const 1
      i32.lt_s
      br_if $B0
      loop $L1
        get_local $p0
        i32.const 1234
        i32.store
        get_local $p0
        i32.const 4
        i32.add
        set_local $p0
        get_local $p1
        i32.const -1
        i32.add
        tee_local $p1
        br_if $L1
      end
    end)
    */

    const auto bin = from_hex(
        "0061736d01000000"
        "01090260000060027f7f00"
        "0303020001"
        "04050170010101"
        "0503010002"
        "0615037f01418088040b7f00418088040b7f004180080b"
        "072c"
        "0404746573740001066d656d6f727902000b5f5f686561705f6261736503010a5f5f646174615f656e640302"
        "0a2c"
        "0202000b2700024020014101480d000340200041d209360200200041046a21002001417f6a22010d000b0b0b");

    const auto module = parse(bin);

    auto instance = instantiate(module, {});
    const auto [trap, ret] = execute(instance, 1, {0, 2});

    ASSERT_FALSE(trap);
    ASSERT_EQ(ret.size(), 0);
    EXPECT_EQ(hex(instance.memory.substr(0, 2 * sizeof(int))), "d2040000d2040000");
}
