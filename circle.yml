version: 2.1

parameters:
  benchmark:
    type: boolean
    default: false

executors:
  linux-gcc-9:
    docker:
      - image: ethereum/cpp-build-env:15-gcc-9
  linux-gcc-latest:
    docker:
      - image: ethereum/cpp-build-env:15-gcc-10
  linux-clang-latest:
    docker:
      - image: ethereum/cpp-build-env:15-clang-10
  macos:
    macos:
      xcode: 11.6.0

commands:
  install_macos_deps:
    description: "Install macOS system dependencies"
    steps:
      - run:
          name: "Install system dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install cmake ninja

  install_wabt:
    description: "Install WABT tools"
    steps:
      - run:
          name: "Install WABT tools"
          command: |
            if type wast2json; then
              wast2json --version
            else
              [[ $OSTYPE = darwin* ]] && os=macos || os=ubuntu
              cd /usr/local
              curl -L https://github.com/WebAssembly/wabt/releases/download/1.0.19/wabt-1.0.19-$os.tar.gz | sudo tar xz --strip 1
            fi

  install_testfloat:
    description: "Install TestFloat test suite tools"
    steps:
      - restore_cache:
          name: "Get TestFloat from cache"
          key: &testfloat-cache-key TestFloat-3e-{{arch}}-v3
      - run:
          name: "Install TestFloat"
          working_directory: /tmp
          command: |
            if [ ! -f testfloat_gen ]; then
              git clone --depth=1 --single-branch https://github.com/ucb-bar/berkeley-softfloat-3.git
              git clone --depth=1 --single-branch https://github.com/ucb-bar/berkeley-testfloat-3.git

              BUILD_DIR=build/Linux-x86_64-GCC
              export TESTFLOAT_OPTS=-DFLOAT64
              (cd berkeley-softfloat-3/$BUILD_DIR && make -j)
              (cd berkeley-testfloat-3/$BUILD_DIR && make testfloat_gen -j)
              mv berkeley-testfloat-3/$BUILD_DIR/testfloat_gen .
            fi
            sudo install -v testfloat_gen /usr/local/bin
            echo 'export FIZZY_TESTFLOAT_REQUIRED=TRUE' >> $BASH_ENV
      - save_cache:
          name: "Save TestFloat to cache"
          key: *testfloat-cache-key
          paths:
            - /tmp/testfloat_gen

  build:
    description: "Build"
    parameters:
      configuration_name:
        type: string
        default: ""
      build_type:
        type: enum
        enum: [ "Debug", "Release", "RelWithDebInfo", "Coverage" ]
      cmake_options:
        type: string
        default: ""
      target:
        type: string
        default: all
    steps:
      - run:
          name: "Environment"
          command: |
            CC=${CC:-cc}
            CXX=${CXX:-cpp}
            echo CC: $CC
            echo CXX: $CXX
            $CC --version
            $CXX --version
            cmake --version
            printf "\nninja $(ninja --version) $((ninja --help 2>&1 || true) | grep -- -j)\n"
            echo TestFloat required: $FIZZY_TESTFLOAT_REQUIRED

            # Create the toolchain.info file for cache key.
            echo $TOOLCHAIN >> toolchain.info
            echo <<parameters.build_type>> >> toolchain.info
            $CXX --version >> toolchain.info
      - restore_cache:
          name: "Restore Hunter cache"
          key: &hunter-cache-key hunter-{{arch}}-{{checksum "toolchain.info"}}-{{checksum "cmake/Hunter/init.cmake"}}
      - run:
          name: "Configure <<parameters.configuration_name>> (<<parameters.build_type>>)"
          working_directory: ~/build
          command: |
            rm -f CMakeCache.txt
            cmake ../project -G Ninja -DCMAKE_INSTALL_PREFIX=~/install -DCMAKE_BUILD_TYPE=<<parameters.build_type>> -DFIZZY_TESTING=ON -DFIZZY_WASI=ON <<parameters.cmake_options>>
      - save_cache:
          name: "Save Hunter cache"
          key: *hunter-cache-key
          paths:
            - ~/.hunter/_Base/Cache
      - run:
          name: "Build <<parameters.configuration_name>> (<<parameters.build_type>>)"
          command: cmake --build ~/build --target <<parameters.target>> -- -j6

  test:
    description: "Test"
    steps:
      - run:
          name: "Run unit tests"
          working_directory: ~/build
          command: ctest -R unittests -j4 --schedule-random --output-on-failure
      - run:
          name: "Run smoke tests"
          working_directory: ~/build
          command: ctest -R smoketests -j4 --schedule-random --output-on-failure
      - run:
          name: "Run other tests"
          working_directory: ~/build
          command: ctest -E 'unittests|smoketests' -j4 --schedule-random --output-on-failure

  collect_coverage_data:
    description: "Collect coverage data"
    steps:
      - run:
          name: "Collect coverage data"
          working_directory: ~/build
          command: |
            binaries='-object bin/fizzy-unittests -object bin/fizzy-spectests -object bin/fizzy-bench -object bin/fizzy-testfloat -object bin/fizzy-wasi'

            mkdir coverage
            find -name '*.profraw'
            llvm-profdata merge *.profraw -o fizzy.profdata

            llvm-cov report -use-color -instr-profile fizzy.profdata -Xdemangler llvm-cxxfilt $binaries
            llvm-cov report -instr-profile fizzy.profdata -Xdemangler llvm-cxxfilt $binaries > coverage/report.txt
            llvm-cov show -format=html -instr-profile fizzy.profdata -Xdemangler llvm-cxxfilt -region-coverage-lt=100 $binaries > coverage/missing.html
            llvm-cov show -format=html -instr-profile fizzy.profdata -Xdemangler llvm-cxxfilt $binaries > coverage/full.html
            llvm-cov export -instr-profile fizzy.profdata -format=lcov $binaries > coverage.lcov
      - store_artifacts:
          path: ~/build/coverage
          destination: coverage

  upload_coverage_data:
    description: "Upload coverage data"
    steps:
      - run:
          name: "Upgrade codecov"
          command: sudo pip3 install --upgrade --quiet --no-cache-dir codecov
      - run:
          name: "Upload to Codecov"
          command: |
            # Convert to relative paths
            sed -i 's|$(pwd)/||' ~/build/coverage.lcov

            counter=1
            until codecov --required --file ~/build/coverage.lcov -X gcov || [ $counter = 5 ]; do
              counter=$((counter+1))
              sleep 1
              echo "Try #$counter..."
            done


  benchmark:
    description: "Run benchmarks"
    parameters:
      repetitions:
        type: integer
        default: 1
      min_time:
        type: string
        default: "0.5"
      out_dir:
        type: string
        default: out
    steps:
      - run:
          name: "Run wasm engine benchmarks"
          working_directory: ~/build
          command: bin/fizzy-bench ~/project/test/benchmarks --benchmark_repetitions=<<parameters.repetitions>> --benchmark_min_time=<<parameters.min_time>> --benchmark_out=engines-<<parameters.out_dir>>
      - run:
          name: "Run fizzy internal benchmarks"
          working_directory: ~/build
          command: bin/fizzy-bench-internal --benchmark_repetitions=<<parameters.repetitions>> --benchmark_min_time=<<parameters.min_time>> --benchmark_out=internal-<<parameters.out_dir>>

  spectest:
    description: "Run spectest"
    parameters:
      skip_validation:
        type: boolean
        default: false
      expected_passed:
        type: integer
        default: 18900
      expected_failed:
        type: integer
        default: 2
      expected_skipped:
        type: integer
        default: 477

    steps:
      - install_wabt
      - run:
          name: "Download spectest files"
          working_directory: ~/build
          command: |
            if [ ! -d wasm-spec ]; then
              git clone https://github.com/wasmx/wasm-spec --branch w3c-1.0-jsontests-20200813 --depth 1 wasm-spec
              mkdir json && cd json
              options='--disable-saturating-float-to-int --disable-sign-extension --disable-multi-value'
              find ../wasm-spec/test/core -name '*.wast' -exec wast2json $options {} \;
            fi
      - run:
          name: "Run spectest<<#parameters.skip_validation>> (skip validation)<</parameters.skip_validation>>"
          working_directory: ~/build
          command: |
            set +e
            export ASAN_OPTIONS=detect_invalid_pointer_pairs=1  # TODO: value 2 causes failures in standard library.
            expected="  PASSED <<parameters.expected_passed>>, FAILED <<parameters.expected_failed>>, SKIPPED <<parameters.expected_skipped>>."
            result=$(bin/fizzy-spectests <<#parameters.skip_validation>>--skip-validation<</parameters.skip_validation>> json | tail -1)
            echo $result
            if [ "$expected" != "$result" ]; then exit 1; fi

jobs:

  lint:
    executor: linux-clang-latest
    steps:
      - checkout
      - run:
          name: "Run shellcheck"
          command: |
            git ls-files '*.sh' | xargs shellcheck
      - run:
          name: "Check code format"
          command: |
            clang-format --version
            git ls-files '*.hpp' '*.cpp' '*.h' '*.c' ':!test/benchmarks/*' | xargs clang-format -i
            git diff --color --exit-code
      - run:
          name: "Run codespell"
          command: |
            codespell --quiet-level=4 -I .codespell-whitelist
      - install_wabt
      - run:
          name: "Check wat2wasm4cpp"
          command: |
            export PATH=$PATH:~/bin
            ./wat2wasm4cpp.py test/unittests/api_test.cpp
            ./wat2wasm4cpp.py test/unittests/capi_test.cpp
            ./wat2wasm4cpp.py test/unittests/end_to_end_test.cpp
            ./wat2wasm4cpp.py test/unittests/execute_call_test.cpp
            ./wat2wasm4cpp.py test/unittests/execute_control_test.cpp
            ./wat2wasm4cpp.py test/unittests/execute_floating_point_test.cpp
            ./wat2wasm4cpp.py test/unittests/execute_numeric_test.cpp
            ./wat2wasm4cpp.py test/unittests/execute_test.cpp
            ./wat2wasm4cpp.py test/unittests/instantiate_test.cpp
            ./wat2wasm4cpp.py test/unittests/module_test.cpp
            ./wat2wasm4cpp.py test/unittests/parser_test.cpp
            ./wat2wasm4cpp.py test/unittests/validation_stack_test.cpp
            ./wat2wasm4cpp.py test/unittests/validation_stack_type_test.cpp
            ./wat2wasm4cpp.py test/unittests/validation_test.cpp
            ./wat2wasm4cpp.py test/unittests/wasm_engine_test.cpp
            ./wat2wasm4cpp.py test/spectests/spectests.cpp
            ./wat2wasm4cpp.py test/testfloat/testfloat.cpp
            git diff --color --exit-code
      - build:
          configuration_name: "Tidy"
          build_type: Debug
          cmake_options: -DWEVERYTHING=TRUE -DCMAKE_CXX_CLANG_TIDY=clang-tidy
      - build:
          configuration_name: "C++20"
          build_type: Debug
          cmake_options: -DCMAKE_CXX_STANDARD=20
      - install_testfloat
      - test

  release-linux:
    executor: linux-gcc-9
    steps:
      - install_testfloat
      - checkout
      - build:
          build_type: Release
      - test

  release-native-linux:
    executor: linux-gcc-latest
    steps:
      - install_testfloat
      - checkout
      - build:
          build_type: Release
          cmake_options: -DNATIVE=ON
      - test

  release-macos:
    executor: macos
    steps:
      - install_macos_deps
      - checkout
      - build:
          build_type: Release
      - test

  release-native-macos:
    executor: macos
    steps:
      - install_macos_deps
      - checkout
      - build:
          build_type: Release
          cmake_options: -DNATIVE=ON
      - test

  coverage-clang:
    executor: linux-clang-latest
    steps:
      - install_testfloat
      - checkout
      - build:
          build_type: Coverage
      - persist_to_workspace:
          root: ~/build
          paths:
            - bin/*
      - test
      - collect_coverage_data

  coverage-gcc:
    executor: linux-gcc-latest
    steps:
      - checkout
      - build:
          build_type: Coverage
      - test
      - run:
          name: "Create coverage report"
          working_directory: ~/build
          command: |
            lcov -c -d . -o coverage.lcov --exclude='/usr/include/*' --exclude="$HOME/.hunter/*" --exclude="$PWD/_deps/*"
            genhtml coverage.lcov -o coverage -t Fizzy
      - store_artifacts:
          path: ~/build/coverage
          destination: coverage
      - upload_coverage_data

  sanitizers-clang:
    executor: linux-clang-latest
    environment:
      # TODO: Enable detect_stack_use_after_return=1 when https://bugs.llvm.org/show_bug.cgi?id=47626 is fixed.
      ASAN_OPTIONS: detect_invalid_pointer_pairs=2
      UBSAN_OPTIONS: halt_on_error=1
    steps:
      - install_testfloat
      - checkout
      - build:
          build_type: RelWithDebInfo
          # TODO: pointer-compare produces failure in std::string operator+.
          cmake_options: -DENABLE_ASSERTIONS=ON -DSANITIZE=address,pointer-subtract,undefined,nullability,implicit-unsigned-integer-truncation,implicit-signed-integer-truncation
      - test
      - benchmark:
          min_time: "0.01"
      - spectest

  sanitizers-macos:
    executor: macos
    environment:
      # TODO: Enable detect_stack_use_after_return=1 when https://bugs.llvm.org/show_bug.cgi?id=47626 is fixed.
      ASAN_OPTIONS: detect_invalid_pointer_pairs=2
      UBSAN_OPTIONS: halt_on_error=1
    steps:
      - install_macos_deps
      - checkout
      - build:
          build_type: RelWithDebInfo
          # TODO: pointer-compare produces failure in std::string operator+.
          cmake_options: -DENABLE_ASSERTIONS=ON -DSANITIZE=address,pointer-subtract,undefined,nullability,implicit-unsigned-integer-truncation,implicit-signed-integer-truncation
      - test
      - benchmark:
          min_time: "0.01"
      - spectest

  benchmark:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      CC: gcc-9
      CXX: g++-9
    steps:
      - run:
          name: "Install benchmark compare.py"
          working_directory: "~"
          command: |
            git clone https://github.com/google/benchmark.git --quiet --depth=1 --single-branch
            pyenv global 3.7.0
            pip install scipy --progress-bar off
            python ~/benchmark/tools/compare.py --help
      - run:
          name: "Install toolchain"
          working_directory: "~"
          command: |
            export DEBIAN_FRONTEND=noninteractive

            # Remove additional sources
            sudo rm /etc/apt/sources.list.d/*

            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -

            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ xenial main'
            sudo apt-get -q update
            sudo apt-get -qy install --no-install-recommends g++-9 cmake ninja-build

      - checkout
      - build:
          build_type: Release
          target: fizzy-bench fizzy-bench-internal
      - benchmark:
          repetitions: 9
          out_dir: new
      - run:
          name: "Checkout base"
          command: git checkout $(git merge-base HEAD origin/master)
      - build:
          build_type: Release
          target: fizzy-bench fizzy-bench-internal
      - benchmark:
          repetitions: 9
          out_dir: old
      - run:
          name: "Compare"
          working_directory: "~"
          command: |
            benchmark/tools/compare.py --display_aggregates_only benchmarks ~/build/engines-old ~/build/engines-new
            benchmark/tools/compare.py --display_aggregates_only benchmarks ~/build/internal-old ~/build/internal-new

  fuzzing:
    executor: linux-clang-latest
    environment:
      # TODO: Enable detect_stack_use_after_return=1 when https://bugs.llvm.org/show_bug.cgi?id=47626 is fixed.
      ASAN_OPTIONS: detect_invalid_pointer_pairs=2
      UBSAN_OPTIONS: halt_on_error=1
    steps:
      - checkout
      - build:
          build_type: RelWithDebInfo
          cmake_options: -DFIZZY_FUZZING=ON -DENABLE_ASSERTIONS=ON
          target: fizzy-fuzz-parser
      - restore_cache:
          name: "Restore fuzzing corpus"
          key: fuzzing-corpus
      - run:
          name: "Prepare corpus"
          working_directory: ~/build
          command: |
            git clone --depth=1 --single-branch https://github.com/wasmx/wasm-fuzzing-corpus
            mkdir -p corpus  # From cache
            mkdir corpus-local
            bin/fizzy-fuzz-parser -merge=1 -use_value_profile=1 corpus-local corpus wasm-fuzzing-corpus/wasm
      - run:
          name: "Parser fuzzing"
          working_directory: ~/build
          command: |
            RUNS=4000000
            MAX_LEN=100

            # Invisible background jobs:
            bin/fizzy-fuzz-parser corpus-local -runs=$RUNS -max_len=$MAX_LEN -len_control=100000 -use_value_profile=1 -verbosity=0 -jobs=4 2>/dev/null &

            # Main job, to see logs:
            bin/fizzy-fuzz-parser corpus-local -runs=$RUNS -max_len=$MAX_LEN -len_control=100000 -use_value_profile=1 -print_final_stats=1
            wait
      - run:
          name: "Clean up fuzzing corpus"
          working_directory: ~/build
          command: |
            rm corpus -rf && mkdir corpus  # Reset cached corpus, we want it to be "moving-window"
            bin/fizzy-fuzz-parser -merge=1 -use_value_profile=1 corpus corpus-local
      - save_cache:
          name: "Save fuzzing corpus"
          key: fuzzing-corpus-{{epoch}}
          paths:
            - ~/build/corpus
      - run:
          name: "Compress fuzzing corpus"
          working_directory: ~/build
          command: |
            corpus_name="corpus-$(date +%Y%m%d%H%M)"
            mv corpus $corpus_name
            mkdir -p artifacts
            tar -czf artifacts/fizzy-$corpus_name.tar.gz $corpus_name
      - store_artifacts:
          name: "Store fuzzing corpus"
          path: ~/build/artifacts
          destination: artifacts

  spectest:
    executor: linux-clang-latest
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - spectest
      - collect_coverage_data

  bindings-rust:
    docker:
      - image: rust:1-buster
    steps:
      - checkout
      - run:
          name: Update environment
          command: |
            echo 'deb http://deb.debian.org/debian buster-backports main' >> /etc/apt/sources.list
            apt -qq update
            apt -yq -t buster-backports install cmake --no-install-recommends
            apt -yq install libclang-dev clang cmake --no-install-recommends
            rustup component add rustfmt
      - run:
          name: Check formatting
          command: |
            rustfmt --version
            cargo fmt --all -- --check
      - run:
          name: Build (debug mode)
          command: cargo build
      - run:
          name: Build (release mode)
          command: cargo build --release
      - run:
          name: Test (debug mode)
          command: cargo test
      - run:
          name: Package
          # The package must be run within the actual crate and not in the workspace.
          working_directory: bindings/rust
          command: cargo package

  bindings-rust-asan:
    docker:
      - image: rust:1-buster
    steps:
      - checkout
      - run:
          name: Update environment
          command: |
            echo 'deb http://deb.debian.org/debian buster-backports main' >> /etc/apt/sources.list
            apt -qq update
            apt -yq -t buster-backports install cmake --no-install-recommends
            apt -yq install llvm-8-dev clang-8 --no-install-recommends
            rustup toolchain install nightly-x86_64-unknown-linux-gnu
      - run:
          name: Build (debug mode)
          command: RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS=detect_leaks=1 cargo +nightly build --target x86_64-unknown-linux-gnu
      - run:
          name: Test (debug mode)
          command: RUSTFLAGS="-Z sanitizer=address -C opt-level=0" ASAN_OPTIONS=detect_leaks=1 cargo +nightly test --target x86_64-unknown-linux-gnu

workflows:
  version: 2

  testing:
    unless: <<pipeline.parameters.benchmark>>
    jobs:
      - lint
      - release-linux:
          requires:
            - release-native-linux
      - release-native-linux
      - release-macos:
          requires:
            - release-native-macos
      - release-native-macos:
          requires:
            - sanitizers-macos
      - coverage-gcc
      - coverage-clang
      - sanitizers-clang
      - sanitizers-macos
      - fuzzing
      - spectest:
          requires:
            - coverage-clang
      - bindings-rust
      - bindings-rust-asan:
          requires:
            - bindings-rust

  benchmarking:
    when: <<pipeline.parameters.benchmark>>
    jobs:
      - benchmark
