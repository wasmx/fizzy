version: 2.1

parameters:
  benchmark:
    type: boolean
    default: false

executors:
  lint:
    docker:
      - image: ethereum/cpp-build-env:13-lint
  linux-gcc-9:
    docker:
      - image: ethereum/cpp-build-env:13-gcc-9
  linux-clang-9:
    docker:
      - image: ethereum/cpp-build-env:13-clang-9
  macos:
    macos:
      xcode: 11.3.0

commands:
  build:
    description: "Build"
    steps:
      - checkout
      - run:
          name: "Environment"
          command: |
            CC=${CC:-cc}
            CXX=${CXX:-cpp}
            echo CC: $CC
            echo CXX: $CXX
            $CC --version
            $CXX --version
            cmake --version

            # Create the toolchain.info file for cache key.
            echo $TOOLCHAIN >> toolchain.info
            echo $BUILD_TYPE >> toolchain.info
            $CXX --version >> toolchain.info
      - restore_cache:
          name: "Restore Hunter cache"
          key: &hunter-cache-key hunter-{{arch}}-{{checksum "toolchain.info"}}-{{checksum "cmake/Hunter/init.cmake"}}
      - run:
          name: "Configure"
          working_directory: ~/build
          command: |
            cmake ../project -G Ninja -DCMAKE_INSTALL_PREFIX=~/install -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DFIZZY_TESTING=ON $CMAKE_OPTIONS
      - save_cache:
          name: "Save Hunter cache"
          key: *hunter-cache-key
          paths:
            - ~/.hunter/_Base/Cache
      - run:
          name: "Build"
          command: cmake --build ~/build

  test:
    description: "Test"
    steps:
    - run:
        name: "Test"
        working_directory: ~/build
        command: ctest -R ${TESTS_FILTER:-'.*'} -j4 --schedule-random --output-on-failure
    - run:
        name: "Run smoketest with fizzy-spectests"
        working_directory: ~/build
        command: bin/fizzy-spectests --skip-validation ~/project/test/spectests/smoketest

  benchmark:
    description: "Run benchmarks"
    steps:
      - run:
          name: "Run wasm engine benchmarks"
          working_directory: ~/build
          command: bin/fizzy-bench ~/project/test/benchmarks
      - run:
          name: "Run fizzy internal benchmarks"
          working_directory: ~/build
          command: bin/fizzy-bench-internal

  spectest:
    description: "Run spectest"
    steps:
      - run:
          name: "Download spectest files"
          working_directory: ~/build
          command: |
            git clone https://github.com/wasmx/wasm-spec --branch vanilla-json --depth 1
      - run:
          name: "Run spectest"
          working_directory: ~/build
          command: |
            set +e
            expected="  PASSED 4468, FAILED 7, SKIPPED 7338."
            result=$(bin/fizzy-spectests --skip-validation wasm-spec/test/core/json | tail -1)
            echo "Expected: $expected"
            echo "Result: $result"
            if [ "$expected" != "$result" ]; then exit 1; fi

jobs:

  lint:
    executor: lint
    steps:
    - checkout
    - run:
        name: "Check code format"
        command: |
          clang-format --version
          find . -name '*.hpp' -o -name '*.cpp' -o -name '*.h' -o -name '*.c' -not -wholename './test/benchmarks/*' | xargs clang-format -i
          git diff --color --exit-code
    - run:
        name: "Run codespell"
        command: |
          codespell --quiet-level=4 -I .codespell-whitelist
    - run:
        name: "Install wabt"
        working_directory: ~/bin
        command: curl -L https://github.com/WebAssembly/wabt/releases/download/1.0.13/wabt-1.0.13-linux.tar.gz | tar xz --strip=1
    - run:
        name: "Check wat2wasm4cpp"
        command: |
          export PATH=$PATH:~/bin
          ./wat2wasm4cpp.py test/unittests/api_test.cpp
          ./wat2wasm4cpp.py test/unittests/end_to_end_test.cpp
          ./wat2wasm4cpp.py test/unittests/execute_call_test.cpp
          ./wat2wasm4cpp.py test/unittests/execute_control_test.cpp
          ./wat2wasm4cpp.py test/unittests/execute_numeric_test.cpp
          ./wat2wasm4cpp.py test/unittests/execute_test.cpp
          ./wat2wasm4cpp.py test/unittests/parser_test.cpp
          ./wat2wasm4cpp.py test/unittests/wasm_engine_test.cpp
          ./wat2wasm4cpp.py test/spectests/spectests.cpp
          git diff --color --exit-code

  release-linux:
    executor: linux-gcc-9
    environment:
      BUILD_TYPE: Release
    steps:
      - build
      - test
      - persist_to_workspace:
          root: ~/build
          paths:
            - bin/fizzy-bench
            - bin/fizzy-spectests

  release-macos:
    executor: macos
    environment:
      BUILD_TYPE: Release
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake ninja
      - build
      - test

  coverage-tidy:
    executor: linux-clang-9
    environment:
      BUILD_TYPE: Coverage
      TESTS_FILTER: unittests
      CMAKE_OPTIONS: -DCMAKE_CXX_CLANG_TIDY=clang-tidy-9
    steps:
      - run:
          name: "Install clang-tidy"
          command: sudo apt-get -q update && sudo apt-get -qy install clang-tidy-9
      - build
      - test
      - run:
          name: "Collect coverage data"
          working_directory: ~/build
          command: |
            mkdir coverage
            find -name '*.profraw'
            llvm-profdata merge *.profraw -o fizzy.profdata

            llvm-cov report -use-color -instr-profile fizzy.profdata -Xdemangler llvm-cxxfilt \
              -object bin/fizzy-unittests \
              -object bin/fizzy-spectests
            llvm-cov report -instr-profile fizzy.profdata -Xdemangler llvm-cxxfilt > coverage/report.txt \
              -object bin/fizzy-unittests \
              -object bin/fizzy-spectests

            llvm-cov show -format=html -instr-profile fizzy.profdata -Xdemangler llvm-cxxfilt -region-coverage-lt=100 > coverage/missing.html \
              -object bin/fizzy-unittests \
              -object bin/fizzy-spectests
            llvm-cov show -format=html -instr-profile fizzy.profdata -Xdemangler llvm-cxxfilt > coverage/full.html \
              -object bin/fizzy-unittests \
              -object bin/fizzy-spectests

            llvm-cov export -instr-profile fizzy.profdata -format=lcov > fizzy.lcov \
              -object bin/fizzy-unittests \
              -object bin/fizzy-spectests
            genhtml fizzy.lcov -o coverage -t Fizzy
      - store_artifacts:
          path: ~/build/coverage
          destination: coverage
      - run:
          name: "Upload to Codecov"
          command: |
            # Convert to relative paths
            sed -i 's|$(pwd)/||' ~/build/fizzy.lcov
            codecov --file ~/build/fizzy.lcov -X gcov

  sanitizers:
    executor: linux-clang-9
    environment:
      BUILD_TYPE: RelWithDebInfo
      CMAKE_OPTIONS: -DENABLE_ASSERTIONS=ON -DSANITIZE=address,undefined,nullability,implicit-unsigned-integer-truncation,implicit-signed-integer-truncation
      UBSAN_OPTIONS: halt_on_error=1
    steps:
      - build
      - test
      - benchmark
      - spectest

  benchmark:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - run:
          name: "Install standard libraries"
          working_directory: "~"
          command: |
            export DEBIAN_FRONTEND=noninteractive

            # Remove all default sources
            sudo rm /etc/apt/sources.list.d/*
            sudo rm /etc/apt/sources.list

            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get -q update
            sudo apt-get -qy install libstdc++6

            wget -q http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/libc6_2.29-0ubuntu2_amd64.deb
            sudo dpkg -i --force-all libc6_2.29-0ubuntu2_amd64.deb

      - attach_workspace:
          at: "~"
      - checkout
      - run:
          name: "Benchmark"
          command: |
            ~/bin/fizzy-bench test/benchmarks --benchmark_color=true --benchmark_repetitions=3 --benchmark_min_time=1

  fuzzing:
    executor: linux-clang-9
    environment:
      BUILD_TYPE: RelWithDebInfo
      CMAKE_OPTIONS: -DFIZZY_FUZZING=ON -DENABLE_ASSERTIONS=ON
      UBSAN_OPTIONS: halt_on_error=1
    steps:
      - build
      - restore_cache:
          name: "Restore fuzzing corpus"
          key: fuzzing-corpus
      - run:
          name: "Parser fuzzing"
          working_directory: ~/build
          command: |
            mkdir -p corpus
            bin/fizzy-fuzz-parser corpus -jobs=8 -runs=1000000 -max_len=1024 -len_control=100000 -use_value_profile=1 -print_final_stats=1
            mv corpus corpus-full
            mkdir corpus
            echo '--- MERGE ---'
            bin/fizzy-fuzz-parser -merge=1 corpus corpus-full
      - save_cache:
          name: "Save fuzzing corpus"
          key: fuzzing-corpus-{{epoch}}
          paths:
            - ~/build/corpus

  spectest:
    executor: linux-gcc-9
    steps:
      - attach_workspace:
          at: ~/build
      - spectest

workflows:
  version: 2

  testing:
    unless: <<pipeline.parameters.benchmark>>
    jobs:
      - lint
      - release-linux
      - release-macos
      - coverage-tidy
      - sanitizers
      - fuzzing
      - spectest:
          requires:
            - release-linux

  benchmarking:
    when: <<pipeline.parameters.benchmark>>
    jobs:
      - release-linux
      - benchmark:
          requires:
            - release-linux
